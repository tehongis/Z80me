
	org 0x0000

; Fill entire memory from 0xFFFF to 0x0000 with pseudo-random bytes

start:
    ld hl, 0xFFFF       ; Start from top of memory
    ld de, 0x0001       ; Used to subtract 1 (DE stays constant)

    ; Seed for LFSR (can be any non-zero value)
    ld a, 0xA5          ; Initial seed for random generator

fill_loop:
    ; Store current random byte into memory
    ld (hl), a

    ; Generate next pseudo-random number (8-bit LFSR)
    ; Polynomial x^8 + x^6 + x^5 + x^4 + 1 (0x1D)
    ld b, a             ; Copy A to B
    srl a               ; Shift right
    bit 0, b            ; Check LSB of original A
    jr z, skip_xor
    xor 0x1D            ; Apply feedback if bit was set

skip_xor:
    ; Decrement HL (HL = HL - 1)
    sbc hl, de

    ; Check if HL is now below 0x0000
    ld a, h
    or l
    jr nz, fill_loop

    ; Done - infinite loop
done:
    jr done
